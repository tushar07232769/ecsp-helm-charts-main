apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "api-registry.fullname" . }}
  labels:
   app: {{ include "api-registry.fullname" . }}
   group: api
spec:
  selector:
    matchLabels:
      app: {{ include "api-registry.fullname" . }}
  replicas: {{ .Values.api_registry.replicas }}
  template:
    metadata:
      labels:
        app: {{ include "api-registry.fullname" . }}
        group: api
        redeploy-timestamp: "123456789"
      name: {{ include "api-registry.fullname" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config-maps-api-registry.yaml") . | sha256sum }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.api_gateway.nodeAffinityKey }}
                operator: In
                values: [{{ .Values.api_registry.nodeType | quote }}]
      containers:
      - name: api-registry
        image: {{ .Values.image.repository }}/api-registry:{{ .Values.api_registry.imageTag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 7000
          name: tcp
        resources: {{- toYaml .Values.api_registry.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: "{{ .Values.api_registry.metrics.basePath }}{{ .Values.api_registry.metrics.health.path }}/liveness"
            port: {{ .Values.api_registry.metrics.port }}
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: "{{ .Values.api_registry.metrics.basePath }}{{ .Values.api_registry.metrics.health.path }}/readiness"
            port: {{ .Values.api_registry.metrics.port }}
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 10
          successThreshold: 1
          timeoutSeconds: 5
        env:
        - name: app
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: ms
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['ms']
        - name: msCtype
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['group']
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: {{ lower .Values.api_registry.database.provider }}_username
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api_registry.database.secretName }}
              key: username
        - name: {{ lower .Values.api_registry.database.provider }}_password
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api_registry.database.secretName }}
              key: password          
        - name: CATALINA_OPTS
          value : "{{ .Values.api_registry.jvmOpts }} {{ .Values.api_registry.javaOpts }}"
        envFrom:
        - configMapRef:
            name: {{ include "api-registry.fullname" . }}-config
        volumeMounts:
          - mountPath: /opt/api-registry/logs
            name: logs
      serviceAccountName: {{ include "api-registry.fullname" . }}
      imagePullSecrets: {{- toYaml .Values.image.imagePullSecrets | nindent 8 }}
      volumes:
        - name: logs
          emptyDir: {}
        - name: config
          emptyDir: {}